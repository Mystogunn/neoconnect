{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "API Neoconnect",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/",
      "description": "Dev version with docker-compose and nginx proxy"
    },
    {
      "url": "/web",
      "description": "Production version"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Login / Register requests"
    },
    {
      "name": "User",
      "description": "General users related requests"
    },
    {
      "name": "Influencers",
      "description": "Influencers related requests"
    },
    {
      "name": "Shop",
      "description": "Shop related requests"
    },
    {
      "name": "Offers",
      "description": "Offers related requests"
    },
    {
      "name": "Contact",
      "description": "Contact related requests"
    },
    {
      "name": "Reset Password",
      "description": "Reset Password related requests"
    }
  ],
  "paths": {
    "/shop/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register as a Shop",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShopRequest"
              },
              "examples": {
                "Minimum Required": {
                  "value": {
                    "pseudo": "Sardoche",
                    "password": "password1234"
                  }
                },
                "Complete": {
                  "value": {
                    "pseudo": "Sardoche",
                    "password": "password1234",
                    "full_name": "Jean Dupont",
                    "email": "jean.dupont@gmail.com",
                    "phone": "0123456789",
                    "society": "Dupont Corp",
                    "function": "CEO",
                    "postal": 75000,
                    "city": "Paris",
                    "theme": "Mode"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  },
                  "Utilisateur déjà existant": {
                    "value": {
                      "code": 400,
                      "message": "Pseudo déjà utilisé"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/inf/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register as an Influencer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InfRequest"
              },
              "examples": {
                "Minimum Required": {
                  "value": {
                    "pseudo": "Sardoche",
                    "password": "password1234"
                  }
                },
                "Complete": {
                  "value": {
                    "pseudo": "Sardoche",
                    "password": "password1234",
                    "sexe": "Homme",
                    "full_name": "Jean Dupont",
                    "email": "jean.dupont@gmail.com",
                    "phone": "0123456789",
                    "facebook": "Jean Dupont",
                    "twitter": "Jean Dupont",
                    "instagram": "Jean Dupont",
                    "snapchat": "Jean Dupont",
                    "postal": 75000,
                    "city": "Paris",
                    "theme": "Mode"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  },
                  "Utilisateur déjà existant": {
                    "value": {
                      "code": 400,
                      "message": "Pseudo déjà utilisé"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login as an Influenceur or as a Shop",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              },
              "example": {
                "pseudo": "Sardoche",
                "password": "password1234"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/LoginSuccess"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  },
                  "Utilisateur déjà existant": {
                    "value": {
                      "code": 400,
                      "message": "Pseudo/Password incorrect"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/comment/{id}": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add comment to User",
        "parameters": [
          {
            "$ref": "#/components/parameters/idUser"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentRequest"
              },
              "example": {
                "comment": "Good Job!"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  },
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get comments for User",
        "parameters": [
          {
            "$ref": "#/components/parameters/idUser"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CommentResponseSuccess"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  },
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/user/mark/{id}": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add mark to User",
        "parameters": [
          {
            "$ref": "#/components/parameters/idUser"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkRequest"
              },
              "example": {
                "mark": 3
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  },
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get marks for User",
        "parameters": [
          {
            "$ref": "#/components/parameters/idUser"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MarkResponseSuccess"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  },
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/user/{id}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete One User",
        "parameters": [
          {
            "$ref": "#/components/parameters/idUser"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/user/search": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Search for Users related to a keyword",
        "parameters": [
          {
            "$ref": "#/components/parameters/Keyword"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Parameters": {
                    "value": {
                      "code": 400,
                      "message": "Mauvais paramètre"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/user/contact": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Send a mail to another user",
        "parameters": [
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              },
              "example": {
                "pseudo": "Sardoche",
                "email": "jean.dupont@gmail.com",
                "subject": "Sujet Mail",
                "message": "Message Mail",
                "to": "mail of receiver"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/inf/me": {
      "get": {
        "tags": [
          "Influencers"
        ],
        "summary": "Get Information of current account",
        "parameters": [
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Influencers"
        ],
        "summary": "Edit Information of current account",
        "parameters": [
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InfRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/inf/{id}": {
      "get": {
        "tags": [
          "Influencers"
        ],
        "summary": "Get Information of another account",
        "parameters": [
          {
            "$ref": "#/components/parameters/idUser"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/inf/listShop": {
      "get": {
        "tags": [
          "Influencers"
        ],
        "summary": "Get Information on all shops",
        "parameters": [
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShopResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/inf/offers/{id}": {
      "get": {
        "tags": [
          "Influencers"
        ],
        "summary": "Get Offers Applied by an Influencer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idUser"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfferResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/shop/me": {
      "get": {
        "tags": [
          "Shop"
        ],
        "summary": "Get Information of current account",
        "parameters": [
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShopResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Shop"
        ],
        "summary": "Edit Information of current account",
        "parameters": [
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShopRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/shop/{id}": {
      "get": {
        "tags": [
          "Shop"
        ],
        "summary": "Get Information of another account",
        "parameters": [
          {
            "$ref": "#/components/parameters/idUser"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShopResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/shop/listInf": {
      "get": {
        "tags": [
          "Shop"
        ],
        "summary": "Get Information on all influencers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InfResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/shop/offers/{id}": {
      "get": {
        "tags": [
          "Shop"
        ],
        "summary": "Get Offers Added by a Shop",
        "parameters": [
          {
            "$ref": "#/components/parameters/idUser"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfferResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/offer/insert": {
      "post": {
        "tags": [
          "Offers"
        ],
        "summary": "Add a new offer",
        "parameters": [
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/offer/list": {
      "get": {
        "tags": [
          "Offers"
        ],
        "summary": "Get All Offers",
        "parameters": [
          {
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "Mettre asc ou desc pour trier par date de update de l'offre, "
          },
          {
            "name": "brand",
            "schema": {
              "type": "string"
            },
            "description": "Mettre une marque ex : nike et la request renverra seulement les offre avec la marque nike"
          },
          {
            "name": "color",
            "schema": {
              "type": "string"
            },
            "description": "Mettre une couleur et la request renverra seulement les offre avec le meme champ color"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfferResponse"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/offer/{id}": {
      "get": {
        "tags": [
          "Offers"
        ],
        "summary": "Get One Offer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idOffer"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request Parameters Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Offers"
        ],
        "summary": "Edit One Offer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idOffer"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  },
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Offers"
        ],
        "summary": "Delete One Offer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idOffer"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/offer/apply/{id}": {
      "get": {
        "tags": [
          "Offers"
        ],
        "summary": "Get User who Applied to Offer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idOffer"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InfResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Offers"
        ],
        "summary": "Apply to One Offer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idOffer"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/offer/comment/{id}": {
      "post": {
        "tags": [
          "Offers"
        ],
        "summary": "Add comment to Offer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idOffer"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentRequest"
              },
              "example": {
                "comment": "Nice Offer !"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  },
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Offers"
        ],
        "summary": "Get comments for Offer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idOffer"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CommentResponseSuccess"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/offer/mark/{id}": {
      "post": {
        "tags": [
          "Offers"
        ],
        "summary": "Add mark to Offer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idOffer"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkRequest"
              },
              "example": {
                "mark": 3
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  },
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Offers"
        ],
        "summary": "Get marks for Offer",
        "parameters": [
          {
            "$ref": "#/components/parameters/idOffer"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MarkResponseSuccess"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Id non existant": {
                    "value": {
                      "code": 400,
                      "message": "Id non existant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/offer/sort": {
      "get": {
        "tags": [
          "Offers"
        ],
        "summary": "Sort Offers related to a keyword",
        "parameters": [
          {
            "$ref": "#/components/parameters/Keyword"
          },
          {
            "$ref": "#/components/parameters/Header"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Parameters": {
                    "value": {
                      "code": 400,
                      "message": "Mauvais paramètre"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/contact": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Send a mail to the support",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              },
              "example": {
                "pseudo": "Sardoche",
                "email": "jean.dupont@gmail.com",
                "subject": "Sujet Mail",
                "message": "Message Mail"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/forgotPassword": {
      "post": {
        "tags": [
          "Reset Password"
        ],
        "summary": "Step 1 to update Password",
        "description": "Send mail to user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgetPasswordRequest"
              },
              "example": {
                "email": "jean.dupont@gmail.com"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  },
                  "Email non reconnu": {
                    "value": {
                      "code": 400,
                      "message": "Adresse mail non existante"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/resetPassword/{resetPasswordToken}": {
      "get": {
        "tags": [
          "Reset Password"
        ],
        "summary": "Step 2 to update Password",
        "description": "Check reset token",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResetPassword"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResetPasswordSuccess"
          },
          "400": {
            "description": "Request Parameters Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  },
                  "Mauvais token": {
                    "value": {
                      "code": 400,
                      "message": "Mauvais reset token"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/updatePassword": {
      "put": {
        "tags": [
          "Reset Password"
        ],
        "summary": "Step 3 to update Password",
        "description": "Set new password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordRequest"
              },
              "example": {
                "email": "jean.dupont@gmail.com",
                "resetPasswordtoken": "aa376956d532f51ca8b98e34868fff970d1b99ab",
                "password": "12345password"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "description": "Request Body Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Error Body": {
                    "value": {
                      "code": 400,
                      "message": "Erreur dans un champ"
                    }
                  },
                  "Email non reconnu": {
                    "value": {
                      "code": 400,
                      "message": "Adresse mail non existante"
                    }
                  },
                  "Mauvais token": {
                    "value": {
                      "code": 400,
                      "message": "Mauvais reset token"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "204": {
        "description": "Success"
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": 401,
              "message": "User non reconnu / Mauvais Token"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Request Body Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "LoginSuccess": {
        "description": "Login Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LoginResponse"
            }
          }
        }
      },
      "CommentResponseSuccess": {
        "description": "Get All Comment Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CommentResponse"
            }
          }
        }
      },
      "MarkResponseSuccess": {
        "description": "Get All Mark Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MarkResponse"
            }
          }
        }
      },
      "ResetPasswordSuccess": {
        "description": "Token OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResetPasswordResponse"
            },
            "example": {
              "email": "jean.dupont@gmail.com",
              "message": "password reset link a-ok"
            }
          }
        }
      }
    },
    "parameters": {
      "idUser": {
        "name": "id",
        "in": "path",
        "description": "user ID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ID"
        }
      },
      "idOffer": {
        "name": "id",
        "in": "path",
        "description": "offer ID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ID"
        }
      },
      "Header": {
        "name": "authorization",
        "in": "header",
        "description": "Bearer Token",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Header"
        }
      },
      "ResetPassword": {
        "name": "resetPasswordToken",
        "required": true,
        "in": "path",
        "schema": {
          "$ref": "#/components/schemas/ResetPasswordRequest"
        }
      },
      "Keyword": {
        "name": "keyword",
        "required": true,
        "in": "path",
        "schema": {
          "$ref": "#/components/schemas/SearchRequest"
        }
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Header": {
        "type": "object",
        "properties": {
          "authorization": {
            "type": "string"
          }
        }
      },
      "ID": {
        "type": "string"
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "pseudo": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "pseudo",
          "password"
        ]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer"
          },
          "userType": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "ContactRequest": {
        "type": "object",
        "properties": {
          "pseudo": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "InfRequest": {
        "type": "object",
        "properties": {
          "pseudo": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "sexe": {
            "type": "string"
          },
          "userType": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "postal": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "userPicture": {
            "type": "string"
          },
          "theme": {
            "type": "string",
            "enum": [
              "mode",
              "high tech",
              "jeux videos",
              "cosmetique",
              "food",
              "sport/fitness"
            ]
          },
          "facebook": {
            "type": "string"
          },
          "twitter": {
            "type": "string"
          },
          "snapchat": {
            "type": "string"
          },
          "instagram": {
            "type": "string"
          },
          "youtube": {
            "type": "string"
          }
        },
        "required": [
          "pseudo",
          "password"
        ]
      },
      "InfResponse": {
        "type": "object",
        "properties": {
          "pseudo": {
            "type": "string"
          },
          "sexe": {
            "type": "string"
          },
          "userType": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "postal": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "userPicture": {
            "type": "string"
          },
          "theme": {
            "type": "string",
            "enum": [
              "mode",
              "high tech",
              "jeux videos",
              "cosmetique",
              "food",
              "sport/fitness"
            ]
          },
          "facebook": {
            "type": "string"
          },
          "twitter": {
            "type": "string"
          },
          "snapchat": {
            "type": "string"
          },
          "instagram": {
            "type": "string"
          },
          "youtube": {
            "type": "string"
          },
          "mark": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "comment": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ShopRequest": {
        "type": "object",
        "properties": {
          "pseudo": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "userType": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "postal": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "userPicture": {
            "type": "string"
          },
          "theme": {
            "type": "string",
            "enum": [
              "mode",
              "high tech",
              "jeux videos",
              "cosmetique",
              "food",
              "sport/fitness"
            ]
          },
          "society": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "twitter": {
            "type": "string"
          },
          "facebook": {
            "type": "string"
          },
          "instagram": {
            "type": "string"
          },
          "snapchat": {
            "type": "string"
          }
        },
        "required": [
          "pseudo",
          "password"
        ]
      },
      "ShopResponse": {
        "type": "object",
        "properties": {
          "pseudo": {
            "type": "string"
          },
          "userType": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "postal": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "userPicture": {
            "type": "string"
          },
          "theme": {
            "type": "string",
            "enum": [
              "mode",
              "high tech",
              "jeux videos",
              "cosmetique",
              "food",
              "sport/fitness"
            ]
          },
          "society": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "twitter": {
            "type": "string"
          },
          "facebook": {
            "type": "string"
          },
          "instagram": {
            "type": "string"
          },
          "snapchat": {
            "type": "string"
          },
          "mark": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "comment": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OfferRequest": {
        "type": "object",
        "properties": {
          "productImg": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "imageName": {
                  "type": "string"
                },
                "imageData": {
                  "type": "string"
                }
              }
            }
          },
          "productName": {
            "type": "string"
          },
          "productSex": {
            "type": "string"
          },
          "productDesc": {
            "type": "string"
          },
          "productSubject": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "brand": {
            "type": "string"
          }
        }
      },
      "OfferResponse": {
        "type": "object",
        "properties": {
          "idUser": {
            "type": "integer"
          },
          "productImg": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "productSex": {
            "type": "string"
          },
          "productDesc": {
            "type": "string"
          },
          "productSubject": {
            "type": "string"
          },
          "productColor": {
            "type": "string"
          },
          "productType": {
            "type": "string"
          },
          "productSociety": {
            "type": "string"
          },
          "mark": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "comment": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CommentRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          }
        }
      },
      "CommentResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "idUser": {
              "type": "integer"
            },
            "type": {
              "type": "string"
            },
            "comment": {
              "type": "string"
            }
          }
        }
      },
      "MarkRequest": {
        "type": "object",
        "properties": {
          "mark": {
            "type": "integer"
          }
        }
      },
      "MarkResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "idUser": {
              "type": "integer"
            },
            "type": {
              "type": "string"
            },
            "mark": {
              "type": "integer"
            }
          }
        }
      },
      "ForgetPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResetPasswordRequest": {
        "type": "object",
        "properties": {
          "resetPasswordToken": {
            "type": "string"
          }
        }
      },
      "ResetPasswordResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "UpdatePasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "resetPasswordToken": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "SearchRequest": {
        "type": "object",
        "properties": {
          "keyword": {
            "type": "string"
          }
        }
      },
      "SearchUserResponse": {
        "type": "object",
        "properties": {
          "userType": {
            "type": "string"
          },
          "pseudo": {
            "type": "string"
          },
          "userPicture": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "theme": {
            "type": "string"
          },
          "note": {
            "type": "number"
          }
        }
      }
    }
  }
}