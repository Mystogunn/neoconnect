
{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "NeoConnect-React-NodeJS-REST-API",
    "description": "A minimal and easy to follow example of what you need to create a CRUD style API in NodeJs using TypeScript",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/",
      "description": "Dev version with docker-compose and nginx proxy"
    },
    {
      "url": "/web",
      "description": "Production version"
    }
  ],
  "tags": [
    {
      "name": "Influencers",
      "description": "API for influencers in the system"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/cats": {
      "get": {
        "tags": [
          "Cats"
        ],
        "summary": "Get all cats in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cats"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cats"
        ],
        "summary": "Create a new cat in system",
        "requestBody": {
          "description": "Cat Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Cat"
              }
            }
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/id"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          }
        }
      }
    },
    "/inf/register": {
      "post": {
        "tags": [
          "Influencers"
        ],
        "summary": "Create a new Influencers user type",
        "requestBody": {
          "description": "Cat Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Inf"
              },
              "examples": {
                "Example required": {
                  "value": {
                    "pseudo": "Sardoche",
                    "password": "password1234"
                  }
                },
                "Example with more arguments": {
                  "value": {
                    "pseudo": "Master",
                    "password": "password1234",
                    "full_name": "Jean Dupont",
                    "email": "jean.dupont@gmail.com",
                    "city": "paris"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ResponseToken"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/BadRequest"
                }
              }
            }
          }
        }
      }
    },
    "/inf/login": {
      "post": {
        "tags": [
        "Influencers"
      ],
      "summary": "login to account to  Influencers user type",
      "requestBody": {
        "description": "Cat Object",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "pseudo": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "required": [
                "pseudo",
                "password"
              ]
            },
            "examples": {
              "Example required": {
                "value": {
                  "pseudo": "Sardoche",
                  "password": "password1234"
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/ResponseToken"
              }
            }
          }
        },
        "400": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/BadRequest"
              }
            }
          }
        }
      }
    }

    },
    "/cats/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of the cat that we want to match",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Cats"
        ],
        "summary": "Get cat with given ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Cat with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cat"
            }
          },
          "404": {
            "description": "Failed. Cat not found."
          }
        }
      },
      "put": {
        "summary": "Update cat with given ID",
        "tags": [
          "Cats"
        ],
        "requestBody": {
          "description": "Cat Object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Cat"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Cat with new values of properties",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cat"
            }
          },
          "400": {
            "description": "Failed. Bad post data."
          },
          "404": {
            "description": "Failed. Cat not found."
          }
        }
      },
      "delete": {
        "summary": "Delete cat with given ID",
        "tags": [
          "Cats"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Delete Cat with id",
            "schema": {
              "$ref": "#/definitions/id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/id"
            }
          },
          "404": {
            "description": "Failed. Cat not found."
          }
        }
      }
    }
  },
  "definitions": {
    "id": {
      "properties": {
        "uid": {
          "type": "string"
        }
      }
    },
    "Cat": {
      "type": "object",
      "properties": {
        "genus": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "isHungry": {
          "type": "boolean"
        },
        "lastFedDate": {
          "type": "string"
        }
      }
    },
    "Cats": {
      "type": "object",
      "properties": {
        "cats": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Cat"
          }
        }
      }
    },
    "Inf": {
      "type": "object",
      "properties": {
        "pseudo": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "full_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "postal": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "theme": {
          "type": "string"
        },
        "facebook": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "snapchat": {
          "type": "string"
        },
        "instagram": {
          "type": "string"
        }
      },
      "required": [
        "pseudo",
        "password"
      ]
    },
    "ResponseToken": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "BadRequest": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    }
  }
}